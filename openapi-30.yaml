openapi: 3.0.0

info:
  title: PagerTree API YAML
  description: 'This is the Swagger definition file for <a href="https://apidocs.pagertree.com">https://apidocs.pagertree.com</a>. Use this file to generate SDKs.'
  version: 3.0.0

externalDocs:
  description: API Documentation
  url: https://apidocs.pagertree.com

servers:
  - url: https://api.pagertree.com

security:
  - APIKey: []
    APISecret: []
  - JWT: []

paths:
  /account/{id}:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      summary: "Retrieve an Account"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
    put:
      summary: "Update an Account"
      responses:
        "200":
          description: Success - The resource was updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: "Delete an Account - DANGER - This will delete all the resources under this account."
      responses:
        "204":
          $ref: "#/components/responses/Delete204"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/Delete404"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"

  /alert:
    post:
      summary: "Create an Alert"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AlertBase"

      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Alert"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
    get:
      summary: "List all Alerts"
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/page"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedAlerts"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
  /alert/mass-action:
    parameters:
      - $ref: "#/components/parameters/id"
    post:
      summary: "Perform a mass action on many alerts"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  description: "The id of the user or team the alert should be handed off to."
                  enum:
                    - acknowledge
                    - reject
                    - resolve
                    - delete
                    - archive
                alert_ids:
                  type: array
                  items:
                    type: string
                    description: "The alert ids to perform the action on."
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Alert"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          $ref: "#/components/responses/Conflict"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"

  /alert/{id}:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      summary: "Retrieve an Alert"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Alert"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
    put:
      summary: "Update an Alert"
      responses:
        "200":
          description: Success - The resource was updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Alert"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: "Delete an Alert"
      responses:
        "204":
          $ref: "#/components/responses/Delete204"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/Delete404"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"

  /alert/{id}/acknowledge:
    parameters:
      - $ref: "#/components/parameters/id"
    post:
      summary: "Acknowledge an Alert"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Alert"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          $ref: "#/components/responses/Conflict"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"

  /alert/{id}/reject:
    parameters:
      - $ref: "#/components/parameters/id"
    post:
      summary: "Reject an Alert"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Alert"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          $ref: "#/components/responses/Conflict"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"

  /alert/{id}/resolve:
    parameters:
      - $ref: "#/components/parameters/id"
    post:
      summary: "Resolve an Alert"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Alert"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          $ref: "#/components/responses/Conflict"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"

  /alert/{id}/archive:
    parameters:
      - $ref: "#/components/parameters/id"
    post:
      summary: "Archive an Alert"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Alert"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          $ref: "#/components/responses/Conflict"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"

  /alert/{id}/handoff:
    parameters:
      - $ref: "#/components/parameters/id"
    post:
      summary: "Handoff an Alert"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                to:
                  type: string
                  description: "The id of the user or team the alert should be handed off to."
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Alert"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          $ref: "#/components/responses/Conflict"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"

  /automation:
    post:
      summary: "Create an Automation"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AutomationBase"

      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Automation"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
    get:
      summary: "List all Automtions"
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/page"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedAutomations"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"

  /automation/{id}:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      summary: "Retrieve an Automation"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Automation"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
    put:
      summary: "Update an Automation"
      responses:
        "200":
          description: Success - The resource was updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Automation"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: "Delete an Automation"
      responses:
        "204":
          $ref: "#/components/responses/Delete204"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/Delete404"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
  /automation/{id}/run:
    parameters:
      - $ref: "#/components/parameters/id"
    post:
      summary: "Run an automation"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Log"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"

  /event:
    post:
      summary: "Create an Event"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventBase"

      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
    get:
      summary: "List all Events"
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/page"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedEvents"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"

  /event/{id}:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      summary: "Retrieve an Event"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
    put:
      summary: "Update an Event"
      responses:
        "200":
          description: Success - The resource was updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: "Delete an Event"
      responses:
        "204":
          $ref: "#/components/responses/Delete204"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/Delete404"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"

  /integration:
    post:
      summary: "Create an Integration"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IntegrationBase"

      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Integration"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
    get:
      summary: "List all Integrations"
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/page"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedIntegrations"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"

  /integration/{id}:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      summary: "Retrieve an Integration"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Integration"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
    put:
      summary: "Update an Integration"
      responses:
        "200":
          description: Success - The resource was updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Integration"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: "Delete an Integration"
      responses:
        "204":
          $ref: "#/components/responses/Delete204"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/Delete404"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"

  /log:
    post:
      summary: "Create a Log"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LogBase"

      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Router"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
    get:
      summary: "List all logs"
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/page"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedLogs"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"

  /log/{id}:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      summary: "Retrieve a Log"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Router"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"

  /notifcation:
    get:
      summary: "List all notifications"
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/page"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedNotifications"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"

  /notification/{id}:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      summary: "Retrieve a Notification"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notification"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"

  /router:
    post:
      summary: "Create a Router"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RouterBase"

      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Router"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
    get:
      summary: "List all Routers"
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/page"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedRouters"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"

  /router/{id}:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      summary: "Retrieve a Router"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Router"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
    put:
      summary: "Update a Router"
      responses:
        "200":
          description: Success - The resource was updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Router"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: "Delete a Router"
      responses:
        "204":
          $ref: "#/components/responses/Delete204"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/Delete404"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
  /router/default-template/{type}:
    parameters:
      - name: type
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/RouterType"
    get:
      summary: "Retrieve a Router"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: string
                description: "The default template string."
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"

  /schedule:
    post:
      summary: "Create a Schedule"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScheduleBase"

      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Schedule"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
    get:
      summary: "List all Schedules"
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/page"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedSchedules"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"

  /schedule/{id}:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      summary: "Retrieve a Schedule"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Schedule"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
    put:
      summary: "Update a Schedule"
      responses:
        "200":
          description: Success - The resource was updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Schedule"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: "Delete a Schedule"
      responses:
        "204":
          $ref: "#/components/responses/Delete204"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/Delete404"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
  /schedule/{id}/window-events:
    parameters:
      - $ref: "#/components/parameters/id"
      - in: query
        name: start
        description: "The unix timestamp of the start of the timeframe"
        schema:
          type: "number"
        required: true
      - in: query
        name: end
        description: "The unix timestamp of the end of the timeframe"
        schema:
          type: "number"
        required: true
    get:
      summary: "Get the on-call events for a timeframe"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedEvents"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          $ref: "#/components/responses/Conflict"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
  /schedule/{id}/flush:
    parameters:
      - $ref: "#/components/parameters/id"
    delete:
      summary: "Delets all the events associated with a schedule."
      responses:
        "200":
          description: Success
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          $ref: "#/components/responses/Conflict"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"

  /stakeholder:
    post:
      summary: "Create a Stakeholder"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StakeholderBase"

      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stakeholder"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
    get:
      summary: "List all Stakholders"
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/page"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedStakeholders"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"

  /stakeholder/{id}:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      summary: "Retrieve a Stakeholder"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stakeholder"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
    put:
      summary: "Update a Stakeholder"
      responses:
        "200":
          description: Success - The resource was updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stakeholder"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: "Delete a Stakeholder"
      responses:
        "204":
          $ref: "#/components/responses/Delete204"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/Delete404"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"

  /team:
    post:
      summary: "Create a Team"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamBase"

      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
    get:
      summary: "List all Teams"
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/page"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedTeams"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"

  /team/{id}:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      summary: "Retrieve a Team"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
    put:
      summary: "Update a Team"
      responses:
        "200":
          description: Success - The resource was updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: "Delete a Team"
      responses:
        "204":
          $ref: "#/components/responses/Delete204"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/Delete404"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
  /team/{id}/current-oncall:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      summary: "Get the current on-call events for a team"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayEvent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          $ref: "#/components/responses/Conflict"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
  /team/{id}/members:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      summary: "Get the users that belong to this team"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedUsers"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          $ref: "#/components/responses/Conflict"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"

  /user:
    post:
      summary: "Create a User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserBase"

      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
    get:
      summary: "List all Users"
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/page"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedUsers"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"

  /user/{id}:
    parameters:
      - $ref: "#/components/parameters/id"
    get:
      summary: "Retrieve a User"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
    put:
      summary: "Update a User"
      responses:
        "200":
          description: Success - The resource was updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: "Delete a User"
      responses:
        "204":
          $ref: "#/components/responses/Delete204"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/Delete404"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
  /user/{id}/add-to-teams:
    parameters:
      - $ref: "#/components/parameters/id"
    post:
      summary: "Add a user to multiple teams"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                team_ids:
                  type: array
                  items:
                    type: string
                    description: "The teams ids to add the user to."
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          $ref: "#/components/responses/Conflict"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "5XX":
          $ref: "#/components/responses/InternalServerError"

components:
  securitySchemes:
    APIKey:
      type: apiKey
      description: API key to authorize request
      name: x-api-key
      in: header
    APISecret:
      type: apiKey
      description: API secrete to authorize request
      name: x-api-secret
      in: header
    JWT:
      type: http
      scheme: bearer

  parameters:
    id:
      name: id
      in: path
      required: true
      schema:
        type: string
    limit:
      name: limit
      in: query
      description: "A limit on the number of objects to be returned, between 1 and 100"
      schema:
        type: "number"
    offset:
      name: offset
      in: query
      description: "A cursor to use in pagination. The number of elements to skip."
      schema:
        type: "number"
    page:
      name: page
      in: query
      description: "A cursor to use in pagination. Uses the limit to calculate current offset"
      schema:
        type: "number"

  responses:
    BadRequest:
      description: Bad Request- The request was unacceptable, often due to a missing required parameter.
    Unauthorized:
      description: Unauthorized - A valid JWT token or API Key + Secret was not provided.
    Forbidden:
      description: Forbidden - You don't have access to the resource requested.
    NotFound:
      description: Not Found - The specified resource does not exist.
    Conflict:
      description: Conflict - The request conflicts with another request (perhaps using the same id or key).
    TooManyRequests:
      description: Too Many Requests - Too many request hit the API too quickly. We recommend an exponential backoff.
    InternalServerError:
      description: Internal Server Error - Something went wrong on PagerTree's servers. (These are rare).
    Delete204:
      description: Success - The resource was deleted successfully.
    Delete404:
      description: Failure - There was an error deleting the resource.

  schemas:
    Base:
      type: "object"
      properties:
        sid:
          type: "string"
          description: "Security identifier for the object."
        id:
          type: "string"
          description: "Unique identifier for the object."
        meta:
          type: "object"
          description: "Free form metadata."
          additionalProperties:
            type: "string"
        tinyId:
          type: "number"
          description: "Human friendly id."
        createdAt:
          type: "string"
          format: "date-time"
          description: "Timestamp when this object was first created."
        updatedAt:
          type: "string"
          format: "date-time"
          description: "Timestamp when this object was last updated."

    AlertType:
      type: "string"
      description: "The alert type."
      enum:
        - admin
        - alert
        - event
        - campaign
        - billing
        - selfservice
      default: alert

    AlertSubtype:
      type: "string"
      description: "The alert subtype."
      enum:
        - alert
        - broadcast
        - page
        - handoff
        - stakeholder
        - feedback
        - rejected
        - resolved
        - acknowledged
        - timeout
        - dropped
        - voicemail
        - goc
        - welcome
        - followup
        - card_expiring
        - charge_succeeded
        - charge_failed
        - credit_expired
        - credit_recharge
        - credit_shortage
        - trial_ending
        - trial_ended
        - subscription_deleted
        - verify_email
        - verify_phone
        - invite
        - forgot_password
        - reset_password
        - unknown_email
        - integration_alert_create_throttled
        - integration_request_throttled
      default: alert

    AlertStatus:
      type: "string"
      description: "Options for alert status."
      enum:
        - open
        - acknowledged
        - resolved
        - dropped
        - archived
        - suppressed
        - aggregating
        - routable
        - errored

    AlertSeverity:
      type: "string"
      description: "Options for alert severity."
      enum:
        - SEV-1
        - SEV-2
        - SEV-3
        - SEV-4
        - SEV-5

    AlertUrgency:
      type: "string"
      description: "Options for alert urgency."
      enum:
        - low
        - medium
        - high
        - critical
      default: medium

    IntegrationType:
      type: "string"
      description: "Options for integration type."
      enum:
        - amazonwebservices
        - apexping
        - appdynamics
        - cronitorio
        - datadog
        - deadmanssnitch
        - elastalert
        - email
        - freshdesk
        - freshservice
        - grafana
        - healthchecksio
        - hyperping
        - jiraserver
        - jotform
        - kapacitor
        - newrelic
        - outgoingwebhook
        - pingdom
        - prometheus
        - prtg
        - serverguard24
        - site24x7
        - slackoutgoingwebhook
        - solarwinds
        - stackdriver
        - statuscake
        - twilio_livecallrouting
        - typeform
        - uptime
        - uptimerobot
        - webhook
        - zendesk

    LogType:
      type: "string"
      description: "Options for log type."
      enum:
        - "log"
        - "response"
        - "feedback"
        - "router"
      default: "log"

    LogSubtype:
      type: "string"
      description: "Options for log subtype."
      enum:
        - "INCOMING"
        - "OUTGOING"
      default: "OUTGOING"

    LogLevel:
      type: "number"
      description: "Options for log level."
      enum:
        - 0 # ERROR
        - 1 # WARN
        - 2 # INFO
        - 3 # VERBOSE
        - 4 # DEBUG
        - 5 # SILLY
      default: 2

    RouterType:
      type: "string"
      description: "Options for router type."
      enum:
        - "router"
        - "notification"
      default: "router"

    ScheduleType:
      type: "string"
      description: "Options for schedule type."
      enum:
        - "escalation_policy"
        - "on_call"
        - "punch_in_out"
      default: "on_call"

    TimeUnit:
      type: "string"
      enum:
        - s
        - m
        - h
        - d
      default: m

    NotificationChannel:
      type: "string"
      enum:
        - push
        - email
        - sms
        - voice
        - slack

    NotificationDirection:
      type: "string"
      enum:
        - "INCOMING"
        - "OUTGOING"
      default: "OUTGOING"

    NotificationProvider:
      type: "string"
      enum:
        - fcm
        - ses
        - mailgun
        - postmark
        - twilio
        - plivo
        - nexmo
        - slack

    NotificationStatus:
      type: "string"
      enum:
        - failed
        - sent
        - received
        - delivered

    NotificationTemplate:
      type: object
      properties:
        push:
          type: object
          properties:
            subject:
              type: string
              description: "The subject template to substitute. Goes to title of push notification."
            message:
              type: string
              description: "The message template to substitute. Goes to body of push notifcation."
        email:
          type: object
          properties:
            subject:
              type: string
              description: "The subject template to substitute. This is the email subject."
            message:
              type: string
              description: "The message template to substitute. This is the email body."
        sms:
          type: object
          properties:
            message:
              type: string
              description: "The message template to substitute. This is the SMS body."
        voice:
          type: object
          properties:
            message:
              type: string
              description: "The message template to substitute. The text that will be read to the user."
            acknowledge:
              type: number
              description: "The dial tone number that acknowledges the alert."
            reject:
              type: number
              description: "The dial tone number that rejects the alert."

    AccountBase:
      type: "object"
      properties:
        name:
          type: "string"
          description: "The name of the account."
        token_id:
          type: "string"
          description: "The unique identifier of the token to use for invites to join the account."
        stripe:
          type: "object"
          description: "The Stripe customer / subscription"
          readOnly: true
          properties:
            customer:
              type: object
            subscription:
              type: object
        sso:
          type: object
          description: "Single Sign On settings"
          properties:
            enabled:
              type: boolean
            type:
              type: string
            saml_url:
              type: string
            issuer_url:
              type: string
            saml_x509:
              type: string
            tenant_id:
              type: string
        notification_templates:
          type: object
          description: "Notification templates for the different notification alert.subtype"
          properties:
            alert_acknowledged:
              $ref: "#/components/schemas/NotificationTemplate"
            alert_alert:
              $ref: "#/components/schemas/NotificationTemplate"
            alert_broadcast:
              $ref: "#/components/schemas/NotificationTemplate"
            alert_dropped:
              $ref: "#/components/schemas/NotificationTemplate"
            alert_handoff:
              $ref: "#/components/schemas/NotificationTemplate"
            alert_page:
              $ref: "#/components/schemas/NotificationTemplate"
            alert_rejected:
              $ref: "#/components/schemas/NotificationTemplate"
            alert_stakeholder:
              $ref: "#/components/schemas/NotificationTemplate"
            alert_timeout:
              $ref: "#/components/schemas/NotificationTemplate"
            event_goc:
              $ref: "#/components/schemas/NotificationTemplate"
    Account:
      allOf:
        - $ref: "#/components/schemas/Base"
        - $ref: "#/components/schemas/AccountBase"

    AlertBase:
      type: "object"
      properties:
        name:
          type: "string"
          description: "The name of the account."
        destination_ids:
          type: "array"
          description: "Where to route the alert to. Should be team, router, or user id."
          items:
            type: string
        title:
          type: string
          description: "The title of the alert."

    Alert:
      allOf:
        - $ref: "#/components/schemas/Base"
        - $ref: "#/components/schemas/AlertBase"
        - type: "object"
          properties:
            parent_id:
              type: string
              description: "Parent alert id - For grouping and aggregating."
            thirdparty_id:
              type: string
              description: "This is set by PagerTree integration during the alert transformation process."
            description:
              type: string
              description: "The description of the alert."
            type:
              $ref: "#/components/schemas/AlertType"
            subtype:
              $ref: "#/components/schemas/AlertSubtype"
            status:
              $ref: "#/components/schemas/AlertStatus"
            urgency:
              $ref: "#/components/schemas/AlertUrgency"
            d_team_id:
              type: string
              description: "The team id this alert is assigned to."
              readOnly: true
            d_user_id:
              type: string
              description: "The user id this alert is assigned to."
              readOnly: true
            s_log_id:
              type: string
              description: "The log id (if any) that created this alert."
              readOnly: true
            created:
              type: number
              description: "The unix timestamp this alert was created."
              readOnly: true
            acknowledged:
              type: number
              description: "The unix timestamp this alert was acknowledged."
              readOnly: true
            acknowledgeby:
              type: string
              description: "The id of the object that acknowledged this alert."
              readOnly: true
            resolved:
              type: number
              description: "The unix timestamp this alert was resolved."
              readOnly: true
            resolvedby:
              type: string
              description: "The id of the object that resolved this alert."
              readOnly: true
            archived:
              type: number
              description: "The unix timestamp this alert was archived."
              readOnly: true
            archivedby:
              type: string
              description: "The id of the object that archived this alert."
              readOnly: true
            livecall:
              type: string
              description: "The Twilio Queue Id of the waiting call."
              readOnly: true
            source_id:
              type: string
              description: "The id of the user or integration that created this alert."
            response_requested:
              type: boolean
              description: "For broadcasts, falg indicating if a response was requested."
              default: false
            tags:
              type: "array"
              description: "An array of strings. Each represents a tag."
              items:
                type: string
            additional_data:
              type: "array"
              description: "An array of objects containing additional data from an integration."
              items:
                type: object
                properties:
                  type:
                    type: "string"
                    enum:
                      - text
                      - link
                      - img
                      - email
                      - email[]
                  label:
                    type: string
                  value:
                    type: string
            stakeholder_ids:
              type: array
              description: "An array of stakeholder ids."
              items:
                type: string
            handoffs:
              type: array
              description: "An array of objects contain information regargind handoffs"
              readOnly: true
              items:
                type: object
                properties:
                  to:
                    type: string
                    description: "The id that the alert is being handed off to."
                  from:
                    type: string
                    description: "The user id that is handing off the alert."
                  time:
                    description: "The unix timestamp that the handoff occured."
                    type: number
                  acknowledged:
                    description: "The unix timestamp that the previous workflow was acknowledged"
                    type: number
            bridge_id:
              type: string
              description: "The id of the bridge that is attached to this bridge"

    AutomationBase:
      type: "object"
      properties:
        name:
          type: "string"
          description: "The name of the automation."
        enabled:
          type: boolean
          description: "Is this automation enabled?"
          default: true
        settings:
          type: "string"
          description: "YAML definition of the automation. See documentation for details: https://pagertree.com/knowledge-base/automations/"

    Automation:
      allOf:
        - $ref: "#/components/schemas/Base"
        - $ref: "#/components/schemas/AutomationBase"

    EventBase:
      type: "object"
      properties:
        schedule_id:
          type: "string"
          description: "The id of the schedule that this event belongs too."
        attendees:
          type: "array"
          description: "Array of user ids that are attached to this event."
          items:
            type: "string"
          minItems: 1
        layer:
          type: "number"
          description: "The esclation rule layer this event belongs to."
        start:
          type: "number"
          description: "The unix timestamp of when this event starts."
        end:
          type: "number"
          description: "The unix timestamp of when this event ends."
        repeat:
          type: "boolean"
          description: "Is this a repeating event?"
        timezone:
          type: "string"
          description: "The moment.js timezone"

    Event:
      allOf:
        - $ref: "#/components/schemas/Base"
        - $ref: "#/components/schemas/EventBase"
        - type: "object"
          properties:
            router_id:
              type: string
              description: "The router id that processes incoming alerts to this team."
            schedule_id:
              type: string
              description: "The on-call schedule id that belongs to this team."
            dow:
              type: array
              description: "An array of ISO day of the week this event is applicable to repeat on"
              items:
                type: "number"
                minimum: 0
                maximum: 6
            frequency:
              type: "number"
              description: "The frequency amount."
              minimum: 1
            frequency_unit:
              type: "string"
              description: "The frequency unit."
              enum:
                - daily
                - weekly
                - monthly
                - yearly
            repeatend:
              type: "number"
              description: "The unix timezone of the start of the last event (inclusive)."
            exceptions:
              type: "array"
              description: "Array of exceptions for the repeating sequence."
              items:
                type: "object"
                properties:
                  start:
                    type: number
                    description: "The unix timestamp of the start of the occurence to omit."
                  event_id:
                    type: string
                    description: "(Optional) The event id that replaces this occurence."
            next:
              type: "object"
              readOnly: true
              description: "The next event to occure. Used by PagerTree for Going On-Call Notifications."
              properties:
                start:
                  type: number
                  description: "Unix timestamp of the start of the next event."
                end:
                  type: number
                  description: "Unix timestamp of the end of the next event."
                started:
                  type: string
                  description: "A guid representing which cycle processed this for the going on-call notifications"

    IntegrationBase:
      type: "object"
      properties:
        name:
          type: "string"
          description: "The name of the integration."
        type:
          $ref: "#/components/schemas/IntegrationType"
        urgency:
          $ref: "#/components/schemas/AlertUrgency"
        destination_ids:
          type: "array"
          description: "Where to route the alert to."
          items:
            type: string

    Integration:
      allOf:
        - $ref: "#/components/schemas/Base"
        - $ref: "#/components/schemas/IntegrationBase"
        - type: "object"
          properties:
            enabled:
              type: boolean
            options:
              type: "object"
              additionalProperties:
                type: string

    LogBase:
      type: "object"
      properties:
        content:
          type: string
          description: "The message of the log."

    Log:
      allOf:
        - $ref: "#/components/schemas/Base"
        - $ref: "#/components/schemas/LogBase"
        - type: "object"
          properties:
            type:
              $ref: "#/components/schemas/LogType"
            subtype:
              $ref: "#/components/schemas/LogSubtype"
            owner_id:
              type: "string"
              description: "Who owns this log? Integration Id, Alert Id"
            source_id:
              type: "string"
              description: "Who created the log? System, user id, integration id"
            level:
              $ref: "#/components/schemas/LogLevel"

    NotificationBase:
      type: "object"
      properties:
        thirdparty_id:
          type: string
          description: "Provider Id"
        user_id:
          type: string
          description: "The user this notification was routed to."

    Notification:
      allOf:
        - $ref: "#/components/schemas/Base"
        - $ref: "#/components/schemas/NotificationBase"
        - type: "object"
          properties:
            source_id:
              type: "string"
              description: "The source of this notification."
            group_id:
              type: "string"
              description: "A group identifier for similary notifications."
            workflow_id:
              type: "string"
              description: "The workflow id that this notification belongs to."
            stakeholder_id:
              type: "string"
              description: "The stakeholder id that this notification belongs to."
            channel:
              $ref: "#/components/schemas/NotificationChannel"
            provider:
              $ref: "#/components/schemas/NotificationProvider"
            template:
              type: "string"
              description: "The template that was used for this notification."
            to:
              type: "string"
              description: "The to address that this notification was sent to."
            from:
              type: "string"
              description: "The from address this notification was sent from"
            direction:
              $ref: "#/components/schemas/NotificationDirection"
            subject:
              type: "string"
              description: "The subject of the notification."
            message:
              type: string
              description: "The message of the notification."
            cost:
              type: number
              description: The amount the notification cost in USD
            status:
              $ref: "#/components/schemas/NotificationStatus"
            provider_status:
              type: "string"
              description: "The provider status of the notification."
            sent:
              type: number
              description: "Unix timestamp of when PagerTree sent the notification."
            delivered:
              type: number
              description: "Unix timestamp of when the provider reported the notification was delivered."
            err:
              type: array
              description: "Array of strings describing the error(s)."
              items:
                type: string

    RouterBase:
      type: "object"
      properties:
        name:
          type: "string"
          description: "The name of the router."
        enabled:
          type: boolean
          description: "Is this router enabled?"
          default: true
        type:
          $ref: "#/components/schemas/RouterType"
        default_receiver:
          type: "string"
          description: "The id of the default receiver. Likely a team or a user. Only applicable to type router."
        rules:
          type: "string"
          description: "YAML definition of the router. See documentation for details: https://pagertree.com/knowledge-base/routers/"

    Router:
      allOf:
        - $ref: "#/components/schemas/Base"
        - $ref: "#/components/schemas/ScheduleBase"

    ScheduleBase:
      type: "object"
      properties:
        name:
          type: "string"
          description: "The name of the schedule."
        type:
          $ref: "#/components/schemas/ScheduleType"
        repeat:
          type: "number"
          description: "The number of times to repeat the esclation rules"
          minimum: 0
          maximum: 3
        reassign:
          type: "array"
          description: "After all the layers, before dropping who should this be reassigned to? An array of those ids."
          items:
            type: "string"
        rules:
          type: "array"
          description: "The escalation rules"
          items:
            type: "object"
            properties:
              color:
                type: "string"
                description: "The hex code to display in the UI for this layer."
              layer:
                type: "number"
                minimum: 1
                description: "The escalation layer of this rule."
              timeout:
                type: "number"
                minimum: 1
                description: "The scalar of the time unit to wait for this layer."
              unit:
                $ref: "#/components/schemas/TimeUnit"

    Schedule:
      allOf:
        - $ref: "#/components/schemas/Base"
        - $ref: "#/components/schemas/ScheduleBase"

    StakeholderBase:
      type: "object"
      properties:
        name:
          type: "string"
          description: "The name of the stakeholder group."
        enabled:
          type: boolean
          description: "Is this stakeholder group enabled?"
          default: true
        user_ids:
          type: "array"
          description: "Array of user ids that are members of this stake holder group."
          items:
            type: "string"
        emails:
          type: "array"
          description: "Array of emails (don't have to be user emails) that are members of this stake holder group."
          items:
            type: "string"
        events:
          type: object
          properties:
            alert_assigned:
              type: boolean
              description: "Send notification on alert.assigned event?"
              default: false
            alert_acknowledged:
              type: boolean
              description: "Send notification on alert.acknowledged event?"
              default: false
            alert_resolved:
              type: boolean
              description: "Send notification on alert.resolved event?"
              default: false
            alert_dropped:
              type: boolean
              description: "Send notification on alert.dropped event?"
              default: false

    Stakeholder:
      allOf:
        - $ref: "#/components/schemas/Base"
        - $ref: "#/components/schemas/StakeholderBase"

    TeamBase:
      type: "object"
      properties:
        name:
          type: "string"
          description: "The name of the team."
        admin_ids:
          type: "array"
          description: "Array of user ids that are team admins."
          items:
            type: "string"
          minItems: 1
        member_user_ids:
          type: "array"
          description: "Array of user ids that are members."
          items:
            type: "string"
          minItems: 1

    Team:
      allOf:
        - $ref: "#/components/schemas/Base"
        - $ref: "#/components/schemas/TeamBase"
        - type: "object"
          properties:
            router_id:
              type: string
              description: "The router id that processes incoming alerts to this team."
            schedule_id:
              type: string
              description: "The on-call schedule id that belongs to this team."
            stakeholder_ids:
              type: array
              description: "An array of stakeholder ids that are attached to alerts assigned to this team."
              items:
                type: "string"

    UserBase:
      type: "object"
      properties:
        name:
          type: "string"
          description: "The name of the user."
        emails:
          type: "array"
          description: "Array of email objects for the user."
          items:
            type: "object"
            properties:
              email:
                type: string
                description: "The email address of the user."
              verified:
                type: number
                description: "Unix timestamp of when the email was verified."
              blocked:
                type: boolean
                description: "Flag indicating if this email is blocked."
              updatedat:
                type: number
                description: "Unix timestamp of the last time this email was updated."
              verificationcode:
                type: string
                readOnly: true
                description: "Encrypted verification code"
              verficationcode_updatedat:
                type: number
                description: "Unix timestamp of the last time the verification code was generated at."
          minItems: 1

    User:
      allOf:
        - $ref: "#/components/schemas/Base"
        - $ref: "#/components/schemas/UserBase"
        - type: "object"
          properties:
            avatar:
              type: string
              description: "The url of the users avatar"
            phones:
              type: "array"
              description: "Array of phone object for the user."
              items:
                type: "object"
                properties:
                  phone:
                    type: string
                    description: "The ISO phone number of the user."
                  country:
                    type: string
                    description: "The ISO country code of the phone number."
                  verified:
                    type: number
                    description: "Unix timestamp of when the phone was verified."
                  blocked:
                    type: boolean
                    description: "Flag indicating if this phone is blocked."
                  updatedat:
                    type: number
                    description: "Unix timestamp of the last time this phone was updated."
                  verificationcode:
                    type: string
                    readOnly: true
                    description: "Encrypted verification code"
                  verficationcode_updatedat:
                    type: number
                    description: "Unix timestamp of the last time the verification code was generated at."
                  sms_enabled:
                    type: boolean
                    description: "Flag indicating if this number has sms enabled"
                  voice_enabled:
                    type: boolean
                    description: "Flag indicating if this number has voice enabled"
            password:
              type: string
              description: "Encrypted password"
            slack:
              type: object
              readOnly: true
              description: "The users Slack connection information"
            router_id:
              type: string
              description: "The notification rules router id"
            preferences:
              type: object
              description: "User preferences"
              properties:
                alert_push:
                  type: boolean
                  description: "Alert via push by default?"
                alert_email:
                  type: boolean
                  description: "Alert via email by default?"
                alert_sms:
                  type: boolean
                  description: "Alert via sms by default?"
                alert_voice:
                  type: boolean
                  description: "Alert via voice by default?"
                alert_slack:
                  type: boolean
                  description: "Alert via Slack by default?"
                advanced_mode:
                  type: boolean
                  description: "Show advanced mode in the GUI?"
                debug_mode:
                  type: boolean
                  description: "Show debug mode in the GUI?"
                locale:
                  type: string
                  description: "The language locale."
                timezone:
                  type: string
                  description: "The users preferred timezeone."
                moment_format:
                  type: string
                  description: "The moment.js format string the user likes to see dates in."
                ui_calendar_firstday:
                  type: number
                  description: "The ISO day of the week that the user likes to see as the first day of the week"
            roles:
              type: object
              properties:
                broadcast:
                  type: boolean
                  description: "Should the user be allowed to create broadcasts?"
                admin:
                  type: boolean
                  description: "Is this user an admin over the PagerTree account?"
                admin_billing:
                  type: boolean
                  description: "Should this user be able to see billing details?"

    ArrayAlert:
      type: "array"
      items:
        $ref: "#/components/schemas/Alert"

    ArrayAutomation:
      type: "array"
      items:
        $ref: "#/components/schemas/Automation"

    ArrayEvent:
      type: "array"
      items:
        $ref: "#/components/schemas/Event"

    ArrayIntegration:
      type: "array"
      items:
        $ref: "#/components/schemas/Integration"

    ArrayLog:
      type: "array"
      items:
        $ref: "#/components/schemas/Log"

    ArrayNotification:
      type: "array"
      items:
        $ref: "#/components/schemas/Notification"

    ArrayRouter:
      type: "array"
      items:
        $ref: "#/components/schemas/Router"

    ArraySchedule:
      type: "array"
      items:
        $ref: "#/components/schemas/Schedule"

    ArrayStakeholder:
      type: "array"
      items:
        $ref: "#/components/schemas/Stakeholder"

    ArrayTeam:
      type: "array"
      items:
        $ref: "#/components/schemas/Team"

    ArrayUser:
      type: "array"
      items:
        $ref: "#/components/schemas/User"

    PaginatedAlerts:
      type: "object"
      properties:
        data:
          $ref: "#/components/schemas/ArrayAlert"
        has_more:
          type: "boolean"
        total_count:
          type: "number"

    PaginatedAutomations:
      type: "object"
      properties:
        data:
          $ref: "#/components/schemas/ArrayAlert"
        has_more:
          type: "boolean"
        total_count:
          type: "number"

    PaginatedEvents:
      type: "object"
      properties:
        data:
          $ref: "#/components/schemas/ArrayEvent"
        has_more:
          type: "boolean"
        total_count:
          type: "number"

    PaginatedIntegrations:
      type: "object"
      properties:
        data:
          $ref: "#/components/schemas/ArrayIntegration"
        has_more:
          type: "boolean"
        total_count:
          type: "number"

    PaginatedLogs:
      type: "object"
      properties:
        data:
          $ref: "#/components/schemas/ArrayLog"
        has_more:
          type: "boolean"
        total_count:
          type: "number"

    PaginatedNotifications:
      type: "object"
      properties:
        data:
          $ref: "#/components/schemas/ArrayNotification"
        has_more:
          type: "boolean"
        total_count:
          type: "number"

    PaginatedRouters:
      type: "object"
      properties:
        data:
          $ref: "#/components/schemas/ArrayRouter"
        has_more:
          type: "boolean"
        total_count:
          type: "number"

    PaginatedSchedules:
      type: "object"
      properties:
        data:
          $ref: "#/components/schemas/ArraySchedule"
        has_more:
          type: "boolean"
        total_count:
          type: "number"

    PaginatedStakeholders:
      type: "object"
      properties:
        data:
          $ref: "#/components/schemas/ArrayStakeholder"
        has_more:
          type: "boolean"
        total_count:
          type: "number"

    PaginatedTeams:
      type: "object"
      properties:
        data:
          $ref: "#/components/schemas/ArrayTeam"
        has_more:
          type: "boolean"
        total_count:
          type: "number"

    PaginatedUsers:
      type: "object"
      properties:
        data:
          $ref: "#/components/schemas/ArrayUser"
        has_more:
          type: "boolean"
        total_count:
          type: "number"
